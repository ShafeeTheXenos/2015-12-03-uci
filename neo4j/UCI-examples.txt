UCI Neo4j Examples
Data Set: test.csv

Clean Slate: match (a)-[r:TO]->(b) delete a,r,b 

LOAD CSV WITH HEADERS FROM "file:///E:/test.csv" AS line
MERGE (n:MyNode {Name:line.Source})
MERGE (m:MyNode {Name:line.Target})
MERGE (n) -[:TO {dist:line.distance}]-> (m)

Finding leaf nodes: match (n:MyNode)-[r:TO]->(m) where not (m-->()) return m
Finding root nodes: match (m)-[r:TO]->(n:MyNode) where not (()-->(m)) return m
Finding triangles: match (a)-[]->(b)-[]->(c)-[]->(a) return distinct a, b, c
Finding paths in triangles: match p=(a)-[]->(b)-[]->(c)-[]->(a) return distinct extract(n in nodes(p)|n.Name) as Paths
Finding 2nd neighbors of D: match (a)-[:TO*..2]-(b) where a.Name='D' return distinct b.Name
Finding paths between specific nodes: match p=(a)-[:TO*]-(c) where a.Name='H'  and c.Name='P' return distinct p limit 1
Extracting and computing with node and properties: match p=(a)-[:TO*]-(c) where a.Name='H'  and c.Name='P' return extract(n in nodes(p)|n.Name) as Nodes, length(p) as pathLength, reduce(s=0, e in relationships(p)| s + toInt(e.dist)) as pathDist limit 1

All Shortest Paths: MATCH p = allShortestPaths(source-[r:TO*]-destination) WHERE source.Name='J' AND destination.Name = 'P' RETURN EXTRACT(n IN NODES(p)| n.Name) AS Paths

All Shortest Paths with Path Conditions: MATCH p = allShortestPaths(source-[r:TO*]->destination) WHERE source.Name='A' AND destination.Name = 'P' AND LENGTH(NODES(p)) > 5 RETURN EXTRACT(n IN NODES(p)| n.Name)
